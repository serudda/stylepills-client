Presentational Components:
- Es como llamariamos en MVC, las vistas. 
- Son considerados 'Tontos', ya que no tienen ni idea de donde llegaron sus 'props' o datos.
- No tienen ni idea acerca del 'state'.
- Nunca deberian cambiar la data en las props por si mismos.
- Aunque estos no deberian cambiar los datos en sus props, si puede formatear los datos 
para mostrarlos de alguna forma (e.g. Recibir un timestamp, y mostrarlos en otro formato de fecha)
- Los Presentational Components son esencialmente la 'paleta' de nuestra aplicación. Podrias
ponerlos a todos en una pagina juntos, y deberian renderizarse perfectamente, para que por
ejemplo un diseñador pueda ajustarlos sin tener que tocar la logica de la aplicación.
- Esto te obliga a extraer los "componentes del diseño" o "layout components" tales como:
Sidebar, Page, ContextMenu, DropDown, etc.
- No tiene contacto alguno con Redux.
- Estos componentes reciben de sus Container Component Parent todo a través de los PROPS, 
estos no deberian manejar STATES en lo absoluto.

Flujo de trabajo: 
Cuando se desee agregar una nueva sección a su aplicación: ej. una pagina nueva. Se recomienda
escribirlo primero como un Presentational Component. Eventualmente, te daras cuenta de que 
estas pasando demasiados props desde el padre. Cuando notes que algunos componentes no estan 
usando los props que estan recibiendo, sino que simplemente los remiten a los componentes hijos.
Es buen momento para agregar algunos Container Components.

Cuando usar Presentational Components:
- Siempre que sea posible, primero por que son simples funciones, y evitamos el estar
creando Class, y gestionando el tedioso: this. 
- Si el componente necesita gestionar un evento: onClick, onChange, etc. Podria: Ser
pasado desde su padre (container), o incluido fuera de la funcion (esto por cuestiones
de performace, se recomiendo colocar por fuera el metodo, obviamente si no necesitas
acceder a las props):


NUNCA HACER ESTO:

    const SomeButton = props => {
        const onClick = e => (...)

        return <button onClick={onClick}>Click me!</button>
    };

SIEMPRE HACER ESTO:

    // Siempre y cuando no necesites acceder a las props, ya que desde aqui no tendrias acceso
    const onClick = e => (...);

    const SomeButton = props => {
        return <button onClick={onClick}>Click me!</button>
    };

Si es necesario modificar las props, cambiar estados locales, conectarse a Redux, o
modificar datos externos, es mejor en ese caso convertirlo en una Class.Component.

reference: https://javascriptplayground.com/functional-stateless-components-react/