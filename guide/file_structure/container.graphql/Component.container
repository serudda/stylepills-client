/********************************/
/*         DEPENDENCIES         */
/********************************/
// Las dependencias de React (react, react-redux, react-router, etc)
import * as React from 'react';
import { connect /* , Dispatch */ } from 'react-redux';
import { graphql, compose } from 'react-apollo';

// Las dependencias de terceros (graphql, highlight, moment, etc)
import * as hljs from 'highlight.js';

// Las dependencias de mis models (uiComponent, user, country, colorPalette, color, etc)
import { UiComponent as UiComponentModel } from 'models/uiComponent/uiComponent.model';
import { ColorPalette as ColorPaletteModel } from 'models/colorPalette/colorPalette.model';
import { User as UserModel } from 'models/user/user.model';

// Las dependencias de mis queries, mutations, subscriptions
import { GET_UI_COMPONENT_BY_ID_QUERY, GetByIdResponse } from 'models/modelName/modelName.query';

// Las dependencias de mi aplicación (ComponentPage, Tooltip, Form, Component, etc)
import ColorPalette from './component/common/ColorPalette';
import ProductListSection from './sections/ProductListSection';
import NotFound from './component/common/NotFound.container';
// -----------------------------------


/********************************/
/*      INTERFACES & TYPES      */
/********************************/

/* NOTE: Representa las propiedades (attributes) del componente. 
	Este type le dice al componente de un nivel superior
	que atributos o propiedades recibe este componente*/
type MyComponentProps = {
	count: number;
	addCount: (value) => void;
};


/***********************************************/
/*              CLASS DEFINITION               */
/***********************************************/
class MyComponent extends React.Component<ChildProps<InputProps, GetByIdResponse>, {}> {


	/********************************/
	/*         CONSTRUCTOR          */
	/********************************/
    constructor(props, context) {
		/* NOTE: No hay necesidad de pasar 'props' en el constructor 
        si desea utilizarlo en otros lugares. Porque React lo configuró 
        automáticamente para usted.
        reference: http://cheng.logdown.com/posts/2016/03/26/683329 */
		
    	super(props, context);

		// Inicializamos el State local
      	this.state = {
        	checked: this.props.checked,
      	};
		
		// Bind methods
    	this.toggleChecked = this.toggleChecked.bind(this);
		this._handleChange = this._handleChange.bind(this);
		this._handleClick = this._handleClick.bind(this);

    }


	/********************************/
	/*       COMPONENTDIDMOUNT      */
    /********************************/
    componentDidMount() {   
        /* NOTE: Se invoca una sola vez, 
		inmediatamente DESPUES de que el renderizado inicial ocurra */
    }


	/********************************/
	/*      COMPONENTWILLMOUNT      */
    /********************************/
    componentWillMount() {  
        /* NOTE: Se invoca una sola vez, 
		inmediatamente ANTES de que el renderizado inicial ocurra */
    }


	/********************************/
	/*      COMPONENTWILLUNMOUNT    */
    /********************************/
    componentWillUnmount() {        
        /* NOTE: Se invoca inmediatamente ANTES de que 
			el componente es desmontado del el DOM */
    }


	/********************************/
	/*        PUBLIC METHODS        */
	/********************************/

	/**
	 * @desc Method description
	 * @method toggleChecked
	 * @example this.toggleChecked()
	 * @public
	 * @returns {void}
	 */
	toggleChecked(): void {

		/* NOTE: Usamos el setState para cambiar los states locales (e.g. checked, cambio de tabs, etc.) 
			States que no necesitan saber los componentes externos. La unica manera de cambiar los states
			locales es usando setState. Ademas disparara la actualizacion del component*/

    	this.setState((prevState) => (
      		{ checked: !prevState.checked }
    	));

  	}


	/********************************/
	/*       PRIVATE METHODS        */
	/********************************/

	/**
	 * @desc Method description. Este metodo es el convencional, que no recibe parametros,
	 * solo realiza una accion al ser disparado, podria cambiar un State, disparar una action, etc.
	 * @method _handleChange
	 * @example this._handleChange()
	 * @private 
	 * @returns {void}
	 */
	private _handleChange(e: Event) {
		/* Aquí, 'e' es un evento sintético. React define estos eventos sintéticos 
		de acuerdo con las especificaciones del W3C, por lo que no necesita preocuparse 
		por la compatibilidad entre navegadores */
        e.preventDefault();
    }

	/**
     * @desc HandleClick pasando parametros al metodos
	 * @important ES6 class property-arrow function esta en stage-2 en el proceso de 
	 * aceptación para incluir en la proxima version de ECMA
	 * reference: https://medium.com/@rjun07a/binding-callbacks-in-react-components-9133c0b396c6
     * @method _handleClick
     * @example this._handleClick('Sergio')
     * @private 
     * @returns {void}
     */
    private _handleClick = (item: string) => (e: any) => {
        e.preventDefault();
        this._checkMyProgress(item);
    }

	/**
     * @desc Metodo private que es llamado por un _handler, y recibe parametros
	 * Este tipo de funciones nos ayudan a dar más contexto a la accion de un boton por ejemplo,
	 * y ademas nos permite reusar el metodo, llamandolo a traves de otros eventos.
     * @method _checkMyProgress
     * @example this._checkMyProgress('Sergio')
     * @private 
     * @returns {void}
     */
    private _checkMyProgress(item: string) {
        e.preventDefault();
        this._checkMyProgress(item);
    }

  
  	/********************************/
	/*        RENDER MARKUP         */
	/********************************/
    render() {


		/*       PROPERTIES       */
        /**************************/
        const {
            // NOTE: This is an example when a component has its own Props.
            /* count, */
            data: {loading, error, uiComponent}/*, match */
        } = this.props;


		/*       VALIDATIONS       */
        /***************************/
        if (loading) {
            return (<div>Loading</div>);
        }

        if (error) {
            return (<p>{error.message}</p>);
        }

        if (uiComponent === null) {
            return (<NotFound />);
        }
      	
		
		/*         MARKUP          */
        /***************************/
        return (
            <div className="ComponentPage row sp-bg-darkSnow no-gutters">

                {/* Left Column: Panel Section */}
                <div className="leftCol col-12 col-sm-5 order-12 order-sm-12 sp-bg-slate">
                    <PanelSection options={uiComponent}/>
                </div>

                {/* Right Column: Preview */}
                <div className="rightCol col-12 col-sm-7 order-1 order-sm-1 mb-5 mb-sm-0 sp-bg-darkSnow">
                    <PreviewSection data={uiComponent}/>
                </div>

				{/* Trigger an event */}
				<input onChange={this._handleChange}/>

				{/* Buttons passing params */}
				<button className="btn btn-primary btn-lg btn-block mb-2"
						onClick={this._handleClick('Sergio')}>
					Check my progress
				</button>

            </div>
        );
    }
}


/* NOTE: Este seria el Type del parametro que enviamos por React-Router */
type InputProps = {
    match: {
        params: {
            id: number
        }
    }
};


/* NOTE: 'config.options' Es un objeto que te permite definir el comportamiento 
	de tu Componente, por ejemplo pasando variables a tu Query para solicitar un
	dato en especifico, filtrar, paginar, etc */
const config = {
	options: (ownProps: InputProps) => (
		{ 
			variables: 
			{ 
				id: ownProps.match.params.id 
			} 
		}
	)
};


/********************************/
/*            QUERY             */
/********************************/

const getUiComponentByIdQuery = graphql<GetByIdResponse, InputProps>(
	GET_UI_COMPONENT_BY_ID_QUERY,
	config
);


/* Export Component */
export default compose(
	getUiComponentByIdQuery
)(MyComponent);


/*

getInitialState()
Mientras antes utilizamos el método especial React API getInitialState() 
para configurar nuestro estado, con las clases ES6 podemos establecer 
"this.state" directamente aquí en el constructor, en otras palabras ya no necesitamos
usar getInitialState()

---

bind nuestros propios methods
Cada vez que definamos nuestros propios métodos de componentes personalizados 
para un componente de clase ES6, tenemos que enlazarlo manualmente al componente nosotros mismos.

// We bind it here:
this.toggleChecked = this.toggleChecked.bind(this);

Ahora, cuando toggleChecked() se ejecuta, esto hará referencia al componente en oposición a null.

---

Graphql Typescript
reference: http://dev.apollodata.com/react/using-with-types.html

---

Comment convention
reference: http://usejsdoc.org/ (scroll down to see each block tag)

/**
 * @desc Method description
 * @method Method Name
 * @function Function Name
 * @example this.addElement(newElement)
 * @extends {React.Component}
 * @private
 * @public
 * @param {string} name - name param description
 * @param {number} age - age param description
 * @returns {component page view (Stateful component)}
 */

---


*/